;;; -*- mode: lisp -*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-i"))
(define-key *root-map* (kbd "c") "exec kitty")

(define-key *top-map* (kbd "Print")  "exec maim ~/$(date +%s).png")
(define-key *top-map* (kbd "s-Print")  "exec maim -s ~/$(date +%s).png")

(define-key *top-map* (kbd "s-Page_Up")  "exec amixer set Master 3%+")
(define-key *top-map* (kbd "s-Page_Down")  "exec amixer set Master 3%-")

(defcommand chromium () ()
  "run or raise chromium with proxy."
  (run-or-raise "chromium --proxy-server=socks5://localhost:1080" '(:class "Chromium")))

(defcommand firefox () ()
  "run or raise firefox"
  (run-or-raise "firefox-bin" '(:class "Firefox")))

(define-key *root-map* (kbd "b") "firefox")

(defcommand telegram () ()
  "run or raise telegram."
  (run-or-raise "telegram-desktop" '(:class "TelegramDesktop")))

(define-key *root-map* (kbd "t") "telegram")

(defcommand run-and-echo () ()
  "run command and echo the results."
  (run-shell-command (read-one-line (current-screen) "command: ") t))

(define-key *top-map* (kbd "s-r") "run-and-echo")

(defun ydcv (word)
  "translate word to chinese by ydcv."
  (run-shell-command
   (concatenate 'string "ydcv " word) t))

(defcommand ydcv-prompt () ()
  "prompt user to input a word to translate."
  (ydcv (read-one-line (current-screen) "word: ")))

(define-key *root-map* (kbd "q") "ydcv-prompt")

(defcommand ydcv-selection () ()
  "translate the selected word on the screen."
  (ydcv (get-x-selection)))

(define-key *top-map* (kbd "s-q") "ydcv-selection")

(setf *mouse-focus-policy* :click)

(setf *colors*
  '("#0a0e14"
    "#f07178"
    "#c2d94c"
    "#ffee99"
    "#39bae6"
    "#ff8f40"
    "#95e6cb"
    "#b3b1ad"))

(defun my/update-color-map (screen)
  "remove color adjust."
  (labels ((map-colors (amt)
             (loop for c in *colors*
                   as color = (lookup-color screen c)
                   do (adjust-color color amt)
                   collect (alloc-color screen color))))
    (setf (screen-color-map-normal screen) (apply #'vector (map-colors 0))
          (screen-color-map-bright screen) (apply #'vector (map-colors 0)))))

(my/update-color-map (current-screen))

(setf *mode-line-background-color* "#0a0e14")
(setf *mode-line-foreground-color* "#39bae6")
(setf *mode-line-timeout* 1)

(load-module "mpd")
(define-key *top-map* (kbd "s-\\")  "mpd-connect")
(define-key *top-map* (kbd "s-]")  "mpd-next")
(define-key *top-map* (kbd "s-[")  "mpd-prev")
(define-key *top-map* (kbd "s-p")  "mpd-toggle-pause")
(setf mpd:*mpd-modeline-fmt* "[%s;%r;%F]: %n/%p %t %e/%l")

(setf *screen-mode-line-format* "^3|%n| ^2%d ^5%m ^4%W")
(mode-line)

(ql:quickload "clx-truetype")
(load-module "ttf-fonts")
(set-font (make-instance 'xft:font :family "WenQuanYi Zen Hei Mono" :subfamily "Regular" :size 13))

(grename "main")
(gnewbg "vice")
(gnewbg "misc")

(run-shell-command "feh --bg-scale -z ~/wallpapers")
(run-with-timer
 600 600
 #'(lambda ()
     (run-shell-command "feh --bg-scale -z ~/wallpapers")))

(run-with-timer
 900 900
 (lambda ()
   (loop for font in (stumpwm::screen-fonts (current-screen))
         when (typep font 'xft:font)
           do (clrhash (xft::font-string-line-bboxes font))
              (clrhash (xft::font-string-line-alpha-maps font))
              (clrhash (xft::font-string-bboxes font))
              (clrhash (xft::font-string-alpha-maps font)))))

;; button 4 - wheel up
;; button 5 - wheel down
;; button 1 - left click
;; button 3 - right click
(add-hook *mode-line-click-hook*
	  (lambda (mode-line button x y)
	    (case button
	      (4 (gprev))
	      (5 (gnext))
	      (1 (pull-hidden-next))
	      (3 (pull-hidden-previous)))))
